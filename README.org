#+TITLE: A wordpress sandbox for trying stuff out.
#+STARTUP: showall


* Shell provisioning

** Started with a vagrant box running apache2

   Ran into problems getting the ~.htaccess~ file written by Wordpress
   to work.

   Gave up and switched to nginx. (as you do.)

** Configuring redirect:

   #+BEGIN_SRC conf
     location /blog/ {
       try_files $uri $uri/ /blog/index.php?$args ;
     }
   #+END_SRC

   p.much just works

** NOTE: when using nginx onna vagrant steek

   Set ~sendfile: off;~ in ~/etc/nginx/nginx.conf~!!

   This is due to the poor and sometimes non-existent signaling of
   file system change events. The nginx server doesn't get wind of the
   change, and so sends a cached version. ~sendfile: off~ turns off
   the caching.

** wp-cli

   http://wp-cli.org/

   command line tool to work with wordpress.

   useful with wptest to actually import stuff, if things about user
   and file permissions didn't necessitate another level of
   indirection.

** thoughts about file ownership

   The default web server runs under the user/group
   ~www-data:www-data~. It seems to make things a lot easier to change
   that to run under ~vagrant:vagrant~ so you can run things without
   constantly dropping into superuser.

   As it's just the vagrant box, it should matter all that much from a
   security standpoint.

   Public deployments shouldn't do this.

** thoughts about project structure

   I ended up provisioning the wordpress install under
   ~/var/www/html/blog/~ with modifications to the nginx site
   configuration.

   For custom theme development:
   - I made a directory under ~/vagrant~ for themes,
   - *copied* over the installation default themes from
     ~wp-content/themes/~,
   - created a new directory ~/vagrant/wp_themes/demo~ for the new
     theme hacking,
   - *symlinked* the demo theme folder back under
     ~wp-content/themes/demo~
   - working in ~/vagrant/wp_themes/demo~ lets me keep it under a
     different Git repo and edit files on the host machine.

* Ansible Provisioning

** Roles

*** external

    - nsops.nodejs
    - calebwoods.brightbox_ruby

    - geerlingguy.apache
    - geerlingguy.mysql
    - geerlingguy.php
    - darthwade.wordpress
    - darthwade.wordpress-apache


    #+BEGIN_SRC shell-script
      ansible-galaxy install -r requirements.yml --force
    #+END_SRC

**** loading external roles isn't working

     #+BEGIN_SRC shell-script
        [WARNING]: - nsops.nodejs was NOT installed successfully: The API server (https://galaxy.ansible.com/api/) is not
       responding, please try again later

       ERROR! - you can use --ignore-errors to skip failed roles and finish processing the list.
     #+END_SRC

**** switching to ansible 1.9 version

     See [[http://stackoverflow.com/questions/3987683/homebrew-install-specific-version-of-formula#4158763][installation - Homebrew install specific version of formula -
     Stack Overflow]] for info on how to do that.

* Configuring for FTP updates from WordPress

  DON'T! See the Direct method below!!

  This is a tricky thing. It would be super nice to have easy access
  to update WordPress on the box, install themes and plugins, and so
  on, like you'd do on an external server. How exactly to do that on a
  Vagrant box locally?


** Install an FTP server

   I added vsftpd to the ansible provisioning, setting up a user to be
   the ftp user for the box. That's the easy part.

** Connect the FTP server to the Host machine

   This isn't so bad, just have to map a port from one to the other on
   the local box. THis is done in the Vagrant file.

   FTP operates at port 21 unsecured, but we usually want to run a
   secure connection. For starters, though, unsecured might be good
   enough.


   - [ ] remember to add the vsftp role to the playbook
   - [ ] remember to reload after setting the forwarded port.

** Optional Direct method

   Link: [[http://www.hongkiat.com/blog/update-wordpress-without-ftp/][How to Update WordPress Automatically Without Using FTP
   Quicktip - Hongkiat]]

   Link: [[https://codex.wordpress.org/Editing_wp-config.php#WordPress_Upgrade_Constants][Editing wp-config.php - WordPress Codex - WordPress Upgrade Constants]]

   *GOLD STAR!!* this is the best method, forget the FTP stuff.
